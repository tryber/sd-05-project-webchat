<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebChat Project - Salinha do Bate Papo</title>
    <!-- Carrega o socket.io -->
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
  </head>

  <body>
    <div>
      <input data-testid="nickname-box" id="nickname" name="nickname" type="text" placeholder="Digite seu novo nickname" />
      <button data-testid="nickname-save" id="nickname-save" >Salvar</button>
    </div>
    <ul id="online-users-list">
      <% if (usersOnline.length > 0) { %>
        <% usersOnline.forEach((u) => { %>
          <li data-testid="online-user" id="<%=u.userId%>"><%=u.nickname%></li>
        <% }) %>
      <% } %>
    </ul>
    <div>
      <ul id="mensagens">
        <% if (allMessages) { %>
          <% allMessages.forEach((m) => { %>
            <li data-testid="message">
              <%= `${m.dateFormat} - ${m.nickname}: ${m.chatMessage}` %>
            </li>
          <% }) %>
        <% } %>
      </ul>
    </div>
    <textarea data-testid="message-box" id="message-input"></textarea>
    <button data-testid="send-button" id="send-message">Enviar mensagem</button>
  </body>

  <!-- Configura interação com servidor -->
  <script>
    const socket = io();

    const nicknameInput = document.getElementById('nickname');
    const messageInput = document.getElementById('message-input');
    const nicknameBtn = document.getElementById('nickname-save');
    const sendMessageBtn = document.getElementById('send-message');
    const userList = document.getElementById('online-users-list');

    let clientId = '';
    let nickname = `User ${Math.round(Math.random() * 1000)}`;
    let chatMessage = '';

    socket.nickname = nickname;

    // Função que irá lidar com todas as alterações do user (login, mudança de nome e logout).
    function renderOnlineUsers(usersOnline) {
      // Limpa a lista de users para não repetir a informação.
      userList.innerText = '';

      // Coloca como primeiro na lista de users online, o user do socket.
      usersOnline.forEach((u) => {
        if (u.userId === clientId) {
          const li = document.createElement('li');
          li.setAttribute('data-testid', 'online-user');
          li.innerHTML = u.nickname;
          userList.appendChild(li);
        }
      })

      // Renderiza o resto da lista com os outros users;
      usersOnline.forEach((user) => {
        if (user.userId !== clientId) {
          const li = document.createElement('li');
          li.setAttribute('data-testid', 'online-user');
          li.innerHTML = user.nickname;
          userList.appendChild(li);
        }
      });
    }

    // Eventos do html (inputs e botões) e emissões do socket;

    messageInput.addEventListener('change', (e) => chatMessage = e.target.value)

    nicknameBtn.addEventListener('click', () => {
      socket.nickname = nicknameInput.value;
      socket.emit('changedNickname', socket.nickname);
    })

    sendMessageBtn.addEventListener('click', () => {
      socket.emit('message', { chatMessage, nickname: socket.nickname });
      messageInput.value = '';
    })

    socket.emit('userLogin', { nickname });

    // Escutas do socket.

    socket.on('updateUsersList', ({ id, usersOnline }) => {
      if (clientId === '') {
        clientId = id;
      }

      renderOnlineUsers((usersOnline));
    })

    socket.on('message', (data) => {
      const li = document.createElement('li');
      li.setAttribute('data-testid', 'message');
      li.innerText = data;

      document.getElementById('mensagens').appendChild(li);
    })

  </script>
</html>